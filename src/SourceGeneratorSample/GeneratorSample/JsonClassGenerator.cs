using System.IO;
using System.Text;
using Microsoft.CodeAnalysis;

namespace GeneratorSample;

[Generator(LanguageNames.CSharp)]
public class JsonClassGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var jsonFiles = context.AdditionalTextsProvider
            .Where(file => file.Path.EndsWith(".json"))
            // .Collect() ファイルが複数あり1つにまとめて生成したい場合は、Collectを使います
            .Select((text, _) =>
            {
                var json = text.GetText()!.ToString();
                var info = System.Text.Json.JsonSerializer.Deserialize<ParsedClassInfo>(json);
                return (Path.GetFileNameWithoutExtension(text.Path), new ParsedClassInfo
                {
                    ClassName = info.ClassName,
                    Properties = info.Properties
                });
            });

        context.RegisterSourceOutput(jsonFiles, Emit);
    }

    private static void Emit(SourceProductionContext context, (string FileName, ParsedClassInfo Info) parsed)
    {
        var builder = new StringBuilder();
        foreach (var p in parsed.Info.Properties)
        {
            builder.AppendLine($$"""
                    public {{p.Type}} {{p.Name}} { get; set; }
                """);
        }

        string source = $$"""
            // <auto-generated />
            namespace GeneratorSample;

            public class {{parsed.Info.ClassName}} 
            {
            {{builder}}
            }
            """;
        context.AddSource($"{parsed.FileName}.g.cs", source);
    }

    private record ParsedClassInfo
    {
        public string ClassName { get; set; }
        public ParsedPropertyInfo[] Properties { get; set; }
    }
    private record ParsedPropertyInfo
    {
        public string Name { get; set; }
        public string Type { get; set; }
    }
}
