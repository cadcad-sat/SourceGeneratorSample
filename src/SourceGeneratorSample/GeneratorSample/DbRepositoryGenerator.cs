using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace GeneratorSample;

[Generator(LanguageNames.CSharp)]
public class DbRepositoryGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static context =>
        {
            context.AddSource("DbRepositoryGeneratorAttribute.cs", """
namespace GeneratorSample;

using System;

[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public sealed class GenerateDbRepositoryAttribute : Attribute
{
}
""");
        });

        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            "GeneratorSample.GenerateDbRepositoryAttribute",
            static (node, token) => true,
            static (context, token) => context);

        context.RegisterSourceOutput(source, Emit);
    }

    static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
        var typeNode = (TypeDeclarationSyntax)source.TargetNode;
        var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace
            ? ""
            : $"namespace {typeSymbol.ContainingNamespace};";

        var code = $$"""
// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

{{ns}}

public partial class {{typeSymbol.Name}}DbRepository
{
    private readonly AppDbContext _context;
    public {{typeSymbol.Name}}DbRepository(AppDbContext context)
    {
        _context = context;
    }

    public async Task<{{typeSymbol.Name}}> GetByIdAsync(int id)
    {
        return await _context.{{typeSymbol.Name}}.FindAsync(id);
    }
}
""";

        // AddSourceで出力
        context.AddSource($"{typeSymbol.Name}DbRepository.g.cs", code);
    }
}

